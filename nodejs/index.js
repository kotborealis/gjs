'use strict';
const Permutation = require("./Permutation.js");
const Matrix = require("./Matrix.js");
/**
 * Test for 5 nodes
 * [ 0, 4, 3, 1, 2 ]
 * 20ms
 * @type {*[]}
 */
//const a = [[0,1,1,1,0],[1,0,1,1,0],[1,1,0,0,1],[1,1,0,0,0],[0,0,1,0,0]];
//const b = [[0,1,0,0,0],[1,0,1,0,1],[0,1,0,1,1],[0,0,1,0,1],[0,1,1,1,0]];
/**
 * Test for 10 nodes
 * [ 3, 9, 0, 7, 2, 6, 4, 5, 1, 8 ]
 * 883ms
 * @type {*[]}
 */
//const a = [[0,1,1,0,0,1,0,0,0,1],[1,0,0,0,1,1,0,0,1,0],[1,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,1,1,1,1],[0,1,0,0,0,0,0,0,1,0],[1,1,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,1],[0,0,0,1,0,0,0,0,1,0],[0,1,0,1,1,0,0,1,0,1],[1,0,1,1,0,0,1,0,1,0]];
//const b = [[0,1,1,0,0,0,0,0,0,0],[1,0,1,1,1,0,0,0,0,0],[1,1,0,1,0,0,0,1,1,0],[0,1,1,0,1,1,1,0,0,0],[0,1,0,1,0,0,0,0,0,0],[0,0,0,1,0,0,1,1,0,1],[0,0,0,1,0,1,0,0,0,0],[0,0,1,0,0,1,0,0,1,1],[0,0,1,0,0,0,0,1,0,0],[0,0,0,0,0,1,0,1,0,0]];
/**
 * Test for 10 nodes
 * [ 0, 5, 4, 2, 7, 1, 3, 6, 8, 9 ]
 * 43ms
 */

const a = [["0","1","0","0","1","0","1","0","0","0"],["1","0","1","0","0","0","0","1","0","0"],["0","1","0","1","0","0","0","0","1","0"],["0","0","1","0","1","0","0","0","0","1"],["1","0","0","1","0","1","0","0","0","0"],["0","0","0","0","1","0","0","1","1","0"],["1","0","0","0","0","0","0","0","1","1"],["0","1","0","0","0","1","0","0","0","1"],["0","0","1","0","0","1","1","0","0","0"],["0","0","0","1","0","0","1","1","0","0"]];
const b = [["0","0","0","1","0","1","0","0","0","1"],["0","0","0","1","1","0","1","0","0","0"],["0","0","0","0","0","0","1","1","0","1"],["1","1","0","0","0","0","0","1","0","0"],["0","1","0","0","0","0","0","0","1","1"],["1","0","0","0","0","0","1","0","1","0"],["0","1","1","0","0","1","0","0","0","0"],["0","0","1","1","0","0","0","0","1","0"],["0","0","0","0","1","1","0","1","0","0"],["1","0","1","0","1","0","0","0","0","0"]];

const permutation = Permutation(a.length);

const _time=new Date().getTime();
let count=0;

let p=permutation.next();
while(!p.done){
    count++;
    Matrix.applyPermutation(p.value,a);
    if(Matrix.equal(a,b)){
        console.log(`Iterated through ${count} permutations.`);
        console.log(`Found isomorphic permutation: ${p.value}`);
        console.log(`Done in ${(new Date().getTime())-_time}ms`);
        return;
    }
    p=permutation.next();
}

console.log("Nope, not happening :^(");
console.log(`Done in ${(new Date().getTime())-_time}ms`);